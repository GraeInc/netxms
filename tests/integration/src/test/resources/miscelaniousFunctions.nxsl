/*
* This script requires:
*     id of node with SNMP and driver
*     existing scheduled task key
*     latest user agent id
*     mappingTableName
*     mappingTableKey1
*     mappingTableValue1
*     mappingTableKey2
*     mappingTableValue2
*/

nodeId = $1;
scheduledKey = $2;
latestUaNotificationId = $3;
node = FindObject(nodeId);
mappingTableName = $4;
mappingTableKey1 = $5;
mappingTableValue1 = $6;
mappingTableKey2 = $7;
mappingTableValue2 = $8;

//Classof
for (n : GetAllNodes()) 
{
   class = classof(n);
   assert("Node" == class);
   break;
}

//Country tests
assert("LV" == CountryAlphaCode("LVA"));
assert("LV" == CountryAlphaCode("428"));
assert(null == CountryAlphaCode("Non existing"));

assert("Latvia" == CountryName("LV"));
assert(null == CountryName("Non existing"));

//Scheduled tasks 
count = CountScheduledTasksByKey("Non existing"); //Create scheduled task
assert(count == 0);
count = CountScheduledTasksByKey(scheduledKey); //Create scheduled task
assert(count == 1);

//User agent notification
notificationId = CreateUserAgentNotification(node, "Interval user agent notification text", time(), time()+86400); //Create notification and then externally check it
assert(notificationId == (latestUaNotificationId + 1));

//Currency
assert("EUR" == CurrencyAlphaCode("978"));
assert(null == CurrencyAlphaCode("Non existing"));

assert(2 == CurrencyExponent("EUR"));
assert(2 == CurrencyExponent("978"));
assert(0 == CurrencyExponent("Non existing"));

assert("Euro" == CurrencyName("EUR")); 
assert("Euro" == CurrencyName("978"));
assert(null == CurrencyName("Non existing"));

//Driver read parameter
//TODO: Make successful test
result = DriverReadParameter(node, "Test"); //Read form SNMP device
assert(result == null);

//Events
code = EventCodeFromName("SYS_NODE_DOWN");
assert(code == 28);
name = EventNameFromCode(28);
assert(name == "SYS_NODE_DOWN");

value = GetConfigurationVariable("TileServerURL");
assert(value == "https://tile.netxms.org/osm/");

value = GetConfigurationVariable("Non Existing");
assert(value == null);

//Syslog rule check
//TODO: Make successful test
result = GetSyslogRuleCheckCount("Non Existing Rule", node);
assert(result == -1);
result = GetSyslogRuleMatchCount("Non Existing Rule", node);
assert(result == -1);

pollerNames = GetThreadPoolNames();
nameFound = false;
for (name : pollerNames)
{
   if (name == "POLLERS")
   {
      nameFound = true;
      break;
   }
}
assert(nameFound);

//Map
assert(mappingTableValue1 == map(mappingTableName, mappingTableKey1, "Default"));
assert(mappingTableValue2 == map(mappingTableName, mappingTableKey2, "Default"));
assert("Default" == map(mappingTableName, "Non existing", "Default"));
assert("Default" == map("Non existing", mappingTableKey1, "Default"));
separator = ";";
keyList = mappingTableKey1 . separator . mappingTableKey2 . separator . "default";
expectedResult = mappingTableValue1 . separator . mappingTableValue2 . separator . "default";
assert(expectedResult == mapList(mappingTableName, keyList, separator, "default"));

//Instance
instance = Instance(displayName: "TestDisplayName", object: node, name: "TestName"); 
assert(instance[0]);
assert("TestName" == instance[1]);
assert("TestDisplayName" == instance[2]);
assert((instance[3] . "") like "Node@*");

//Test time and sleep
time = time();
sleep(5000);
newTime = time();
assert(newTime == (time + 5));

//Persistent storage
name = "TestName";
value = ReadPersistentStorage(name);
assert(value == null);

WritePersistentStorage(name, "Value");
value = ReadPersistentStorage(name);
assert(value == "Value");

WritePersistentStorage(name, "Value2");
value = ReadPersistentStorage(name);
assert(value == "Value2");

WritePersistentStorage(name, null);
value = ReadPersistentStorage(name);
assert(value == null);

//weierstrass
assert((weierstrass(0.5, 7, 10) . "") == "1.999218");
